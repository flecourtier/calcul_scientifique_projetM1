//QUESTION 3 : Schéma aux différences finis

//condition initiale (à t=0)
fn u_0(x: f64) -> f64 {
    if x<0. {
        return 1.;
    }
    else if x>1. {
        return 0.;
    }
    else {
        return 1.-x;
    }
}

//u_exact déterminé en question 1
fn u(x: f64, t:f64) -> f64 {
    if t<1. {
        if x<t { return 1.; }
        else if (x>=t) & (x<=1.) { return (1.-x)/(1.-t); }
        else { return 0.; }
    }
    else {
        if x <= (t+1.)/2. { return 1.; }
        else { return 0.; }
    }
}

//f(u)=u^2/2 pour l'équation de Burgers
fn f(u: f64) -> f64 {
    u*u/2.
}

//f'(u)=u
fn f_prime(u: f64) -> f64 {
    u
}

//Résolution par différences finies
fn solve_diff_finies(N: usize, T: f64) -> (Vec<f64>,Vec<f64>,f64) {
    let a=-1.; let b=2.;
    let dx = (b-a)/(N as f64);
    let mut t=0.;

    //on définit les points de discrétisation
    let mut x=vec![0.;N+2];
    for i in 0..N+2 {
        x[i]=a+(i as f64 - 1./2.)*dx;
    }

    // on définit u au temps 0
    let mut uapp=vec![0.;N+2];
    for i in 0..N+2 {
        uapp[i]=u_0(x[i]);
    }

    // on définit un vecteur qui sera u au temps n+1
    let mut uapp_p1=vec![0.;N+2];

    //on résout le schéma en temps
    while t < T {
        let mut dt = dx/3.;

        //on détermine u en n+1
        for i in 1..N+1 {
            uapp_p1[i]=uapp[i]-dt/dx*uapp[i-1]*(uapp[i]-uapp[i-1]);
        }
        
        //on copie le vecteur u en n+1 déterminé avant dans uapp 
        uapp[0]=1.; //condition au bord u(a,t)=1
        for i in 1..N+1 {
            uapp[i]=uapp_p1[i];
        }
        uapp[N+1]=uapp[N];

        t=t+dt;
    }

    (x,uapp,t)
}

fn plotu(N:usize, T: f64) -> std::io::Result<()> {
    let fic = File::create("resu_diff_finies.dat")?;
    let mut fic = BufWriter::new(fic); // create a buffer for faster writes...

    let (xn,uapp,tn)=solve_diff_finies(N, T);

    writeln!(fic,"{:?}",tn)?;

    for i in 0..N {
        writeln!(fic, "{} {} {}", xn[i], uapp[i],u(xn[i],tn))?;
    }

    Ok(())
}

fn main() {
    let N=50;
    let T=2.;
    plotu(N, T);
}